name: LLM PR Review (OpenAI, MVP)

on:
  pull_request:
    types: [opened, reopened, synchronize]
    # 필요 시 제외 경로
    paths-ignore: ["**/*.md", "docs/**", "**/*.png", "**/*.jpg", "**/*.svg", "**/*.pdf", "**/*.json"]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: '리뷰할 PR 번호'
        required: true

permissions:
  contents: read
  pull-requests: write
  issues: read

jobs:
  review:
    if: >
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request &&
       contains(github.event.comment.body, '/llm review')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: LLM 총평 코멘트 달기
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.LLM_API_KEY }}
          OPENAI_BASE_URL: https://api.openai.com/v1
          OPENAI_MODEL: gpt-4o-mini
        with:
          script: |
            if (!process.env.OPENAI_API_KEY) {
              core.setFailed('OPENAI_API_KEY (LLM_API_KEY) 누락');
              return;
            }

            const isPR = !!context.payload.pull_request;
            const isIssueComment = context.eventName === 'issue_comment';
            const isManual = context.eventName === 'workflow_dispatch';

            let prNumber =
              (isPR && context.payload.pull_request.number) ||
              (isIssueComment && context.payload.issue?.number) ||
              (isManual && Number(core.getInput('pr_number'))) ||
              0;

            if (!prNumber) {
              core.setFailed('PR 번호를 찾을 수 없습니다. (pull_request/issue_comment 이벤트거나, workflow_dispatch면 pr_number 입력 필요)');
              return;
            }

            const { owner, repo } = context.repo;

            // 1) PR 메타/파일/디프 수집
            const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
            const files = await github.paginate(github.rest.pulls.listFiles, {
              owner, repo, pull_number: prNumber, per_page: 100
            });

            // --- 디프 축약(토큰 방어)
            const MAX_TOTAL_CHARS = 8000;
            const MAX_PER_FILE = 1200;
            let used = 0;
            const parts = [];

            for (const f of files) {
              const patch = f.patch || '';
              const header = `\n\n### ${f.status.toUpperCase()} ${f.filename}\n`;
              const budget = Math.max(0, MAX_PER_FILE - header.length);
              const snippet = patch.slice(0, budget);
              const block = `${header}\`\`\`diff\n${snippet}\n\`\`\``;

              if (used + block.length > MAX_TOTAL_CHARS) break;
              parts.push(block);
              used += block.length;
            }

            // --- 프롬프트(백틱 대신 \n 사용, YAML 안전)
            const systemPrompt =
              "You are a senior code reviewer. Reply in Korean. " +
              "If evidence is insufficient, say '확실하지 않음'. " +
              "Be concise and actionable. Provide file/line hints when possible.";

            const userPrompt =
              "[PR]\\n" +
              `제목: ${pr.data.title}\\n` +
              `작성자: ${pr.data.user?.login}\\n` +
              `타겟 브랜치: ${pr.data.base?.ref}\\n` +
              "설명:\\n" +
              (pr.data.body || "(설명 없음)") + "\\n\\n" +
              "[디프(일부)]\\n" +
              parts.join("\\n") + "\\n\\n" +
              "[요구사항]\\n" +
              "1) 핵심 이슈 요약 (3~6줄)\\n" +
              "2) 위험/버그 가능성\\n" +
              "3) 성능·메모리·동시성 유의점\\n" +
              "4) 보안/비밀정보 노출 가능성\\n" +
              "5) 테스트 보강 제안\\n" +
              "6) 스타일/일관성(간결)\\n" +
              "7) 머지 전 확인 체크리스트 (불확실한 항목은 '확실하지 않음')";

            // --- OpenAI 호출
            const payload = {
              model: process.env.OPENAI_MODEL,
              messages: [
                { role: 'system', content: systemPrompt },
                { role: 'user', content: userPrompt }
              ],
              temperature: 0.2,
              max_tokens: 1000
            };

            const resp = await fetch(`${process.env.OPENAI_BASE_URL}/chat/completions`, {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify(payload)
            });

            if (!resp.ok) {
              const text = await resp.text();
              core.setFailed(`OpenAI 호출 실패: ${resp.status} ${text}`);
              return;
            }

            const data = await resp.json();
            const content = data.choices?.[0]?.message?.content?.trim() || "(응답 없음)";

            // --- PR 코멘트 게시
            await github.rest.issues.createComment({
              owner, repo, issue_number: prNumber,
              body: content + "\n\n---\n_자동 생성: LLM PR Review (OpenAI · safe)_"
            });