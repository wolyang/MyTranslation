name: LLM PR Review (manual, fixed prompt)

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: '리뷰할 PR 번호 (예: 23)'
        required: true

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Run review (single summary comment)
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.LLM_API_KEY }}
          OPENAI_BASE_URL: https://api.openai.com/v1
          OPENAI_MODEL: gpt-4o-mini

          # 기본 프롬프트는 Actions Variable에서 로드 (커밋 없이 웹에서 수정 가능)
          BASE_PROMPT: ${{ vars.REVIEW_PROMPT_BASE }}

          # 실행 입력
          PR_NUMBER_INPUT: ${{ github.event.inputs.pr_number }}

          # 비용 세이프가드(필요시 변수로 빼서 조정 가능)
          MAX_TOTAL_CHARS: '8000'
          MAX_PER_FILE: '1200'
        with:
          script: |
            try {
              // github-script는 core, github, context를 이미 주입합니다.

              // --- 0) 키/입력 체크
              const token = process.env.OPENAI_API_KEY;
              if (!token) { core.setFailed("LLM_API_KEY 시크릿이 없습니다."); return; }

              const prNumber = Number(process.env.PR_NUMBER_INPUT || 0);
              if (!prNumber) { core.setFailed("pr_number 입력이 필요합니다."); return; }

              const { owner, repo } = context.repo;

              // --- 1) PR/파일
              const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
              const files = await github.paginate(github.rest.pulls.listFiles, {
                owner, repo, pull_number: prNumber, per_page: 100
              });

              // --- 2) 디프 축약(비용 세이프가드)
              const MAX_TOTAL = Number(process.env.MAX_TOTAL_CHARS || 8000);
              const MAX_PER   = Number(process.env.MAX_PER_FILE || 1200);
              const IMPORTANT = new Set(['.swift','.kt','.java','.m','.mm','.cpp','.cc','.c','.ts','.tsx','.js','.jsx','.py','.rb','.go','.rs','.php']);
              const extOf = (p) => (p.lastIndexOf('.')>=0 ? p.slice(p.lastIndexOf('.')).toLowerCase() : '');

              const sorted = files.slice().sort((a,b) => (IMPORTANT.has(extOf(a.filename))?0:1)-(IMPORTANT.has(extOf(b.filename))?0:1));
              let used = 0;
              const parts = [];
              for (const f of sorted) {
                const patch = f.patch || '';
                const header = `\n\n### ${f.status.toUpperCase()} ${f.filename}\n`;
                const budget = Math.max(0, MAX_PER - header.length);
                const snippet = patch.slice(0, budget);
                const block = `${header}\`\`\`diff\n${snippet}\n\`\`\``;
                if (used + block.length > MAX_TOTAL) break;
                parts.push(block);
                used += block.length;
              }
              const skipped = files.length - parts.length;

              // --- 3) 프롬프트 (고정: BASE_PROMPT만 사용)
              const basePrompt = (process.env.BASE_PROMPT || '').trim();

              // 시스템 지침(간결/라인 힌트/확실치 않음 명시)
              const systemPrompt =
                "You are an expert code reviewer. Reply in Korean. " +
                "Facts only; if unsure, say '확실하지 않음'. Prefer concrete, line-anchored feedback and patch-style suggestions.";

              // PR/디프 컨텍스트 + 저장된 기본 프롬프트 결합
              const userPrompt =
                "[PR]\n" +
                `제목: ${pr.data.title}\n` +
                `작성자: ${pr.data.user?.login}\n` +
                `타겟 브랜치: ${pr.data.base?.ref}\n` +
                "설명:\n" +
                (pr.data.body || "(설명 없음)") + "\n\n" +
                "[변경 요약]\n" +
                `- 총 파일 수: ${files.length}\n` +
                `- 분석 대상 파일 수: ${parts.length}${skipped>0?` (추가 ${skipped}개 생략)`:''}\n\n` +
                "[디프(일부)]\n" +
                parts.join("\n") + "\n\n" +
                (basePrompt ? "[리뷰 지시(고정)]\n" + basePrompt + "\n" : "");

              // --- 4) OpenAI 호출
              const payload = {
                model: process.env.OPENAI_MODEL,
                messages: [
                  { role: 'system', content: systemPrompt },
                  { role: 'user',   content: userPrompt }
                ],
                temperature: 0.2,
                max_tokens: 1200
              };

              const resp = await fetch(`${process.env.OPENAI_BASE_URL}/chat/completions`, {
                method: "POST",
                headers: {
                  "Authorization": `Bearer ${token}`,
                  "Content-Type": "application/json"
                },
                body: JSON.stringify(payload)
              });

              if (!resp.ok) {
                const text = await resp.text();
                core.setFailed(`OpenAI 호출 실패: ${resp.status} ${text}`);
                return;
              }

              const data = await resp.json();
              const content = data.choices?.[0]?.message?.content?.trim() || "(응답 없음)";

              // --- 5) PR 코멘트
              const footer = "\n\n---\n_자동 생성: LLM PR Review (manual · fixed prompt)_";
              await github.rest.issues.createComment({
                owner, repo, issue_number: prNumber,
                body: content + footer
              });
            } catch (e) {
              core.setFailed(`Unhandled error: ${e?.stack || e}`);
            }
